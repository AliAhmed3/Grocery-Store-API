{
	"info": {
		"_postman_id": "6bf4940a-9396-43a9-a959-0949385d9e6e",
		"name": "Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26234033"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Get Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									"// Verify that the request method is GET.\r",
									"pm.test(\"Verify request method to be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/status",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Authentication",
			"item": [
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Make a collection variable for token to use in next requests\r",
									"pm.collectionVariables.set(\"token\", JSON.parse(responseBody).accessToken);\r",
									"\r",
									"// Check that the response contains the token successfully\r",
									"pm.test(\"API Authentication --> Check that response body contains token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check that the response is in JSON format\r",
									"pm.test(\"API Authentication --> Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"mendy\",\r\n   \"clientEmail\": \"mendy111@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/api-clients",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Show all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"// Check that the request method is GET.\r",
									"pm.test(\"Request method should be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"\r",
									"// Check that the response is in json text format.\r",
									"pm.test(\" check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/products",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": null,
									"description": "Specifies the category of products you want to be returned. It can be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee.",
									"disabled": true
								},
								{
									"key": "results",
									"value": "5",
									"description": "Specifies the number of results you want. Must be number between 1 and 20. By default, only 20 products will be displayed.",
									"disabled": true
								},
								{
									"key": "available",
									"value": "false",
									"description": "Specifies the availability of the products. By default, all products will be displayed.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify that the request method is GET.\r",
									"pm.test(\"Request method should be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\" check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Verify that the API response contains all the expected fields.\r",
									"\r",
									"\r",
									"pm.test(\" Check that response contains id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\" Check that response contains category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"pm.test(\" Check that response contains manufacturer\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"manufacturer\");\r",
									"});\r",
									"\r",
									"pm.test(\" Check that response contains price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"pm.test(\" Check that response contains current-stock\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"current-stock\");\r",
									"});\r",
									"\r",
									"pm.test(\" Check that response contains inStock\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"inStock\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" Check that response contains product-label\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"product-label\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\" Check that price not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).price).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/products/:productId?product-label=true",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "product-label",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "4643"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Cart folder/ Check that cart is created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json().cartId;\r",
									"pm.collectionVariables.set(\"cartid\",jsonData);\r",
									"\r",
									"// Verify that the request method is POST.\r",
									"pm.test(\"Request method should be POST\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"POST\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Check that the API response contains all the expected fields.\r",
									"\r",
									"\r",
									"// Check that the response contains the 'created' field.\r",
									"pm.test(\"Cart folder /Create a new cart --> Check that responce contains created\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"created\");\r",
									"});\r",
									"\r",
									"// Check that the response contains the 'cartId' field.\r",
									"pm.test(\"Cart folder /Create a new cart --> Check that responce contains cartId\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"cartId\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/carts",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify that the request method is GET.\r",
									"pm.test(\"Request method should be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\" check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify that the request method is GET.\r",
									"pm.test(\"Request method should be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\" check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json().itemId; \r",
									"pm.collectionVariables.set(\"itemid\", jsonData);\r",
									"\r",
									"// Verify that the request method is POST.\r",
									"pm.test(\"Request method should be POST\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"POST\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Check that the API response contains all the expected fields.\r",
									"\r",
									"\r",
									"// Check that the response contains the 'created' field.\r",
									"pm.test(\"Cart folder /Add an item to cart --> Check that responce contains created\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"created\");\r",
									"});\r",
									"\r",
									"// Check that the response contains the 'itemId' field.\r",
									"pm.test(\"Cart folder /Add an item to cart --> Check that responce contains itemId\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"itemId\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\": {{ProductId}},\r\n   \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId/items",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Check that the request method is Patch.\r",
									"pm.test(\"Request method should be PATCH\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"PATCH\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								},
								{
									"key": "itemId",
									"value": "{{itemid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Check that the request method is PUT.\r",
									"pm.test(\"Request method should be PUT\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"PUT\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\":{{ProductId}},\r\n   \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								},
								{
									"key": "itemId",
									"value": "{{itemid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"// Check that the request method is DELETE.\r",
									"pm.test(\"Request method should be DELETE\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								},
								{
									"key": "itemId",
									"value": "{{itemid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that the request method is GET.\r",
									"pm.test(\"Request method should be GET\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"\r",
									"// Check that the response is in json text format.\r",
									"pm.test(\" check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_Url}}/orders",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Orders folder/ Check that Order is created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json().orderId;\r",
									"pm.collectionVariables.set(\"orderid\", jsonData);\r",
									"\r",
									"// Verify that the request method is POST.\r",
									"pm.test(\"Request method should be POST\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"POST\");\r",
									"});\r",
									"\r",
									"// Verify that the response is in JSON format.\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Check that the API response contains all the expected fields.\r",
									"\r",
									"\r",
									"\r",
									"// Check that the response contains the 'orderId' field.\r",
									"pm.test(\"Cart folder /Create a new order --> Check that responce contains orderId\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"orderId\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"i4yU6sND5iEIkcfYgJ7oD\",\r\n    \"customerName\": \"John muller\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/orders",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Check that the request method is Patch.\r",
									"pm.test(\"Request method should be PATCH\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"PATCH\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"customerName\": \"John mendy\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/orders/:orderId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Check that the request method is DELETE.\r",
									"pm.test(\"Request method should be DELETE\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"DELETE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_Url}}/orders/:orderId",
							"host": [
								"{{Base_Url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Check that Response time is less than 2 seconds\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Base_Url",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "cartid",
			"value": "gKgBxZWmQZIXUYGXVby_J"
		},
		{
			"key": "ProductId",
			"value": "4643",
			"type": "string"
		},
		{
			"key": "itemid",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "orderid",
			"value": ""
		}
	]
}